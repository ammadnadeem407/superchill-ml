import torch
from diffusers import StableDiffusionPipeline
from PIL import Image
from IPython.display import display
from models.Davinci import text_list
from tokens import hugging_token
# Function for Loading dreamlike-art/dreamlike-photoreal-2.0 Model


def load_model(model_id, hugging_token, device, torch_dtype=torch.float16):
    # set up diffusion model
    pipe = StableDiffusionPipeline.from_pretrained(
        model_id, torch_dtype=torch_dtype, use_auth_token=hugging_token)
    pipe = pipe.to(device)
    return pipe

# Function for Generating Images from the paragraph prompts generated by story generator model.


def generate_images_from_prompts(pipe, text_list, num_imgs, seed, num_inference_steps, guidance_scale):
    # set the generator seed
    generator = torch.Generator("cuda").manual_seed(seed)
    all_images = []
    for line in text_list:
        gen = 'dreamlikeart, ' + line
        for i in range(num_imgs):
            images = pipe(gen, num_inference_steps=num_inference_steps,
                          guidance_scale=guidance_scale, generator=generator).images
            all_images.extend(images)
    return all_images

# Functions for displaying, and storing images generated


def display_text_and_images(images, text_list):
    for i, img in enumerate(images):
        print(text_list[i])
        display(img)


def save_images(all_images):
    # save images to disk
    for i, img in enumerate(all_images):
        img.save(f'{i}.png')


def image_grid(imgs, rows, cols):
    # assert len(imgs) == rows*cols

    w, h = imgs[0].size
    grid = Image.new('RGB', size=(cols*w, rows*h))
    grid_w, grid_h = grid.size

    for i, img in enumerate(imgs):
        grid.paste(img, box=(i % cols*w, i//cols*h))
    return grid


if __name__ == "__main__":

    # Loading the SD Model
    model_id = "dreamlike-art/dreamlike-photoreal-2.0"
    device = "cuda"
    pipe = load_model(model_id, hugging_token, device,
                      torch_dtype=torch.float16)
    # Generating Images from the paragraph prompts generated by story generator model.
    num_imgs = 1
    seed = 1024
    num_inference_steps = 50
    guidance_scale = 8
    images = generate_images_from_prompts(
        pipe, text_list, num_imgs, seed, num_inference_steps, guidance_scale)
    # To Display Generated Images and Text
    display_text_and_images(images, text_list)
    # To save Generated Images
    save_images(images)
    # To save Images Inside a Grid
    grid = image_grid(images, rows=3, cols=3)
    display(grid)
    grid.save(f'grid.png')
